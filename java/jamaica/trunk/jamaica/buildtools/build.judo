/////////////////////////////////////////////////////////////////////
// Environment
/////////////////////////////////////////////////////////////////////

!include '../../common/common.judi'

myroot   = (#script.getFilePath() + '..').getFileCanonicalPath();

build    = '${myroot}/_build';
src      = '${myroot}/src';
docs     = '${myroot}/docs';
examples = '${myroot}/examples';

mkdir '${build}/tmp/jj';
mkdir '${build}/tmp/classes';

cp = '${build}/tmp/classes${:}${lib}/commons-lang-2.0.jar${:}${lib}/asm-1.4.2.jar${:}${lib}/bcel-5.1.jar';
cp = cp.toOSPath();


/////////////////////////////////////////////////////////////////////
// Select Targets
/////////////////////////////////////////////////////////////////////

menuItems = [
  'Clobber All',                      // 1
  'Build All',                        // 2
  '  Generate Parser',                //  3
  '  Compile Non-Parser Source Code', //  4
  '  Compile All Source Code',        //  5
  '  Package',                        //  6
];

switch menu(menuItems,false) {
  case 1:  clobberAll();     break;
  case 2:  generateParser(); compileAll(); pkg(); break;
  case 3:  generateParser(); break;
  case 4:  compileSource();  break;
  case 5:  compileAll();     break;
  case 6:  pkg();            break;
  default: return;
}

/////////////////////////////////////////////////////////////////////
// Build Targets
/////////////////////////////////////////////////////////////////////

function generateParser {
  println<err> nl, '::: JJtree jamaica.jjt ...', nl;
  exec '${jjtree} -OUTPUT_DIRECTORY:${build}/tmp/jj ${src}/jjt/jamaica.jjt'.toOSPath()
       with PATH=j13path
  ;

  println<err> nl, '::: Javacc jamaica.jj ...', nl;
  exec '${javacc} -OUTPUT_DIRECTORY:${build}/tmp/jj ${build}/tmp/jj/jamaica.jj'.toOSPath()
       with PATH=j13path
  ;
}

function compileSource {
  println<err> nl, '::: Javac source ...', nl;
  exec 'javac -d ${build}/tmp/classes ${src}/*.java ${src}/parser/*.java'
       with PATH=j13path, CLASSPATH=cp
  ;
}

function compileAll {
  println<err> nl, '::: Javac all ...', nl;
  exec 'javac -d ${build}/tmp/classes ${src}/*.java ${src}/parser/*.java ${build}/tmp/jj/*.java'.toOSPath()
       with PATH=j13path, CLASSPATH=cp
  ;
}

function clobberAll {
  println<err> nl, '::: Clobber all ...', nl;
  rmdir '${build}/tmp/' force;
  mkdir '${build}/tmp/jj';
  mkdir '${build}/tmp/classes';
}

/////////////////////////////////////////////////////////////////////
// Package Target
/////////////////////////////////////////////////////////////////////

function pkg {
  println<err> nl, '::: Packaging ...', nl;

  manif = [[*
    Manifest-Version: 1.0
    Main-Class: com.judoscript.jamaica.Main
    Created-By: James Jianbo Huang (c) 2004-(* #year *)
  *]];

  jar = createJar('${build}/tmp/jamaica.jar', manif);
  copy 'org/apache/commons/lang/*.class' in '${lib}/commons-lang-2.0.jar' store into jar;
  copy '*.class' in '${build}/tmp/classes' store recursive into jar;
  jar.close();

  copy '*' in src except '*~' into '${build}/tmp/src.jar' recursive under 'src';

  manif = [[*
    Manifest-Version: 1.0
    Created-By: JudoScript, James Jianbo Huang (c) 2004-(* #year *)
    Specification-Vendor: JudoScript.com
    Specification-Version: jamaica-1.0
    Implementation-Vendor: JudoScript.com
    Implementation-Version: jamaica-1.0
  *]];

  file = '${build}/jamaica-1.0.zip';
  zip = createJar(file, manif);
  copy '${build}/tmp/jamaica.jar, ${build}/tmp/src.jar' into zip under versionId;
  copy 'license.html, release.html' in '${docs}' into zip under versionId;
  copy 'examples/*' in myroot except '*~, */alfa*' recursive into zip under versionId;
  zip.close();

  println<err> nl, 'Created ${file}.', nl;
}

catch: println<err> $_;
