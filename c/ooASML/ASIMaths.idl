/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */

#ifndef ASI_MATHS_IDL
#define ASI_MATHS_IDL

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/lang/XServiceName.idl>
#include <com/sun/star/lang/XInitialization.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>
#include <com/sun/star/uno/RuntimeException.idl>
#include <com/sun/star/sheet/XAddIn.idl>

module org
{
    module asi
    {
        interface XMaths : com::sun::star::uno::XInterface
        {
            string getType( [in] any data )
                raises (com::sun::star::uno::RuntimeException);

            sequence<sequence<string> > getExceptions( [in] any dummy )
                raises (com::sun::star::uno::RuntimeException);

            string saveValue( [in] string name,
                            [in] double value )
                raises (com::sun::star::uno::RuntimeException);

            double getValue( [in] string name )
                raises (com::sun::star::uno::RuntimeException);

            sequence<sequence<double> > projection([in] sequence< sequence < double > > x, 
                                                   [in] sequence< sequence < double > > a,
                                                   [in] sequence< sequence < double > > b)
                raises (com::sun::star::uno::RuntimeException);
            
            sequence<sequence<double> > dykstra([in] sequence< sequence < double > > x, 
                                                [in] sequence< sequence < double > > a, 
                                                [in] sequence< sequence < double > > b)
                raises (com::sun::star::uno::RuntimeException);
            
            sequence<sequence<double> > svdSolve([in] sequence< sequence < double > > a, 
                                                 [in] sequence< sequence < double > > b)
                raises (com::sun::star::uno::RuntimeException);
            
            sequence<sequence<double> > fastExp([in] double t, 
                                                [in] sequence< sequence < double > > a, 
                                                [in] long method, 
                                                [in] double theta)
                raises (com::sun::star::uno::RuntimeException);


            double heston([in] double strike, 
                          [in] double time1, 
                          [in] double time2, 
                          [in] double sigma, 
                          [in] double kappa, 
                          [in] double theta, 
                          [in] double alpha, 
                          [in] double rho, 
                          [in] long points)
                raises (com::sun::star::uno::RuntimeException);
            
            double black([in] double strike, 
                         [in] double time, 
                         [in] double sigma)
                raises (com::sun::star::uno::RuntimeException);
            
            double impliedVolatility([in] double price, 
                                     [in] double strike, 
                                     [in] double time)
                raises (com::sun::star::uno::RuntimeException);
            
            sequence<sequence<double> > variousBS([in] double strike, 
                                                  [in] double time, 
                                                  [in] double sigma) 
                raises (com::sun::star::uno::RuntimeException);


            double finiteDifference([in] sequence< sequence < double > > xa, 
                                    [in] sequence< sequence < double > > ya, 
                                    [in] double x, 
                                    [in] long order )
                raises (com::sun::star::uno::RuntimeException);


            sequence<sequence<double> > fft([in] sequence<sequence<double> > data) 
                raises (com::sun::star::uno::RuntimeException);
            
            sequence<sequence<string> > fftUnpack([in] sequence<sequence<double> > data) 
                raises (com::sun::star::uno::RuntimeException);
            
            sequence<sequence<double> > fftPack([in] sequence<sequence<string> > data) 
                raises (com::sun::star::uno::RuntimeException);
            
            sequence<sequence<double> > ifft([in] sequence<sequence<double> > data) 
                raises (com::sun::star::uno::RuntimeException);
            
            sequence<sequence<double> > hestonFFT([in] double time1, 
                                                  [in] double time2, 
                                                  [in] double sigma, 
                                                  [in] double kappa, 
                                                  [in] double theta, 
                                                  [in] double alpha, 
                                                  [in] double rho, 
                                                  [in] long N, 
                                                  [in] double stddev)
                raises (com::sun::star::uno::RuntimeException);


            sequence<sequence<string> > regExp([in] string regexp,
                                               [in] string text)
                raises (com::sun::star::uno::RuntimeException);
                

            string createMarketData([in] string name,
                                    [in] double date,
                                    [in] sequence<sequence<string> > ccys,
                                    [in] sequence<sequence<double> > rates,
                                    [in] sequence<sequence<string> > stocks,
                                    [in] sequence<sequence<double> > spots,
                                    [in] sequence<sequence<string> > domestics,
                                    [in] sequence<sequence<double> > repos,
                                    [in] sequence<sequence<double> > vols,
                                    [in] sequence<sequence<double> > correlations)
                raises (com::sun::star::uno::RuntimeException);
                                    
            string createPayoff([in] string name,
                                [in] string filename)
                raises (com::sun::star::uno::RuntimeException);

            sequence<sequence<double> > mcPricer( [in] string payoff, 
                                                  [in] string ccy, 
                                                  [in] sequence< sequence< string > > names, 
                                                  [in] string marketData,
                                                  [in] sequence< sequence< any > > details) 
                raises (com::sun::star::uno::RuntimeException);
            
        };
        
        service Maths
        {
            interface XMaths;
            interface com::sun::star::lang::XInitialization;
            interface com::sun::star::lang::XServiceName;
            interface com::sun::star::sheet::XAddIn;
        };
    };
};

#endif
