#############################################################################
# Makefile for building divx
# Generated by tmake at 15:08, 2003/11/30
#     Project: divx
#    Template: app
#############################################################################

####### Compiler, tools and options

CC	=	gcc
CXX	=	g++
CFLAGS	=	-pipe -Wall -W -O2 -D_REENTRANT -DQT_THREAD_SUPPORT -DNO_DEBUG
CXXFLAGS=	-pipe -Wall -W -O2 -D_REENTRANT -DQT_THREAD_SUPPORT -DNO_DEBUG
INCPATH	=	-I$(QTDIR)/include
LINK	=	g++
LFLAGS	=	
LIBS	=	$(SUBLIBS) -L$(QTDIR)/lib -L/usr/X11R6/lib -L. -ldivxencore -ldivxdecore -lccvt -lpthread -lqt-mt -lXext -lX11 -lm
MOC	=	$(QTDIR)/bin/moc
UIC	=	$(QTDIR)/bin/uic

TAR	=	tar -cf
GZIP	=	gzip -9f

####### Files

HEADERS =	divx.h \
		divx_asi.h \
		screen.h \
		dec.h \
		enc.h
SOURCES =	divx.cpp \
		screen.cpp \
		dec.cpp \
		enc.cpp
OBJECTS =	divx.o \
		screen.o \
		dec.o \
		enc.o
INTERFACES =	
UICDECLS =	
UICIMPLS =	
SRCMOC	=	moc_divx.cpp \
		moc_screen.cpp \
		moc_dec.cpp \
		moc_enc.cpp
OBJMOC	=	moc_divx.o \
		moc_screen.o \
		moc_dec.o \
		moc_enc.o
DIST	=	
TARGET	=	divx
INTERFACE_DECL_PATH = .

####### Implicit rules

.SUFFIXES: .cpp .cxx .cc .C .c

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules


all: $(TARGET)

$(TARGET): $(UICDECLS) $(OBJECTS) $(OBJMOC) 
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJMOC) $(LIBS)

moc: $(SRCMOC)

tmake: Makefile

Makefile: divx.pro
	tmake divx.pro -o Makefile

dist:
	$(TAR) divx.tar divx.pro $(SOURCES) $(HEADERS) $(INTERFACES) $(DIST)
	$(GZIP) divx.tar

clean:
	-rm -f $(OBJECTS) $(OBJMOC) $(SRCMOC) $(UICIMPLS) $(UICDECLS) $(TARGET)
	-rm -f *~ core

####### Sub-libraries


###### Combined headers


####### Compile

divx.o: divx.cpp \
		divx_asi.h \
		divx.h \
		dec.h \
		screen.h

screen.o: screen.cpp \
		screen.h \
		divx_asi.h \
		ccvt.h

dec.o: dec.cpp \
		dec.h \
		screen.h \
		divx_asi.h

enc.o: enc.cpp \
		enc.h \
		screen.h \
		divx_asi.h

moc_divx.o: moc_divx.cpp \
		divx.h \
		dec.h \
		screen.h

moc_screen.o: moc_screen.cpp \
		screen.h

moc_dec.o: moc_dec.cpp \
		dec.h \
		screen.h

moc_enc.o: moc_enc.cpp \
		enc.h \
		screen.h

moc_divx.cpp: divx.h
	$(MOC) divx.h -o moc_divx.cpp

moc_screen.cpp: screen.h
	$(MOC) screen.h -o moc_screen.cpp

moc_dec.cpp: dec.h
	$(MOC) dec.h -o moc_dec.cpp

moc_enc.cpp: enc.h
	$(MOC) enc.h -o moc_enc.cpp

